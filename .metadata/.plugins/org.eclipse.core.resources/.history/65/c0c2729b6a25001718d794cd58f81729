package com.linklist;

import java.util.Random;

//Java program for implementation of Heap Sort
public class HeapSort
{
 public void sort(int arr[])
 {
     int n = arr.length;

     // Build heap (rearrange array)
     for (int i = n / 2 - 1; i >= 0; i--)
         heapify(arr, n, i);

     // One by one extract an element from heap
     for (int i=n-1; i>=0; i--)
     {
         // Move current root to end
         int temp = arr[0];
         arr[0] = arr[i];
         arr[i] = temp;

         // call max heapify on the reduced heap
         heapify(arr, i, 0);
     }
 }

 // To heapify a subtree rooted with node i which is
 // an index in arr[]. n is size of heap
 void heapify(int arr[], int n, int i)
 {
     int largest = i;  // Initialize largest as root
     int l = 2*i + 1;  // left = 2*i + 1
     int r = 2*i + 2;  // right = 2*i + 2

     // If left child is larger than root
     if (l < n && arr[l] > arr[largest])
         largest = l;

     // If right child is larger than largest so far
     if (r < n && arr[r] > arr[largest])
         largest = r;

     // If largest is not root
     if (largest != i)
     {
         int swap = arr[i];
         arr[i] = arr[largest];
         arr[largest] = swap;

         // Recursively heapify the affected sub-tree
         heapify(arr, n, largest);
     }
 }

 /* A utility function to print array of size n */
 static void printArray(int arr[])
 {
     int n = arr.length;
     for (int i=0; i<n; ++i)
         System.out.print(arr[i]+" ");
     System.out.println();
 }

 public static int selectKth(int[] arr, int k) {
	 if (arr == null || arr.length <= k)
	  throw new Error();
	 
	 int from = 0, to = arr.length - 1;
	 
	 // if from == to we reached the kth element
	 while (from < to) {
	  int r = from, w = to;
	  int mid = arr[(r + w) / 2];
	 
	  // stop if the reader and writer meets
	  while (r < w) {
	 
	   if (arr[r] >= mid) { // put the large values at the end
	    int tmp = arr[w];
	    arr[w] = arr[r];
	    arr[r] = tmp;
	    w--;
	   } else { // the value is smaller than the pivot, skip
	    r++;
	   }
	  }
	 
	  // if we stepped up (r++) we need to step one down
	  if (arr[r] > mid)
	   r--;
	 
	  // the r pointer is on the end of the first k elements
	  if (k <= r) {
	   to = r;
	  } else {
	   from = r + 1;
	  }
	 }
	 System.out.println(arr[k]);
	 return arr[k];
	}

 
 
 // Driver program
 public static void main(String args[])
 {
     int arr[] = {12, 11, 13, 5, 6, 7};
     int n = arr.length;

    // quickselect(arr,4);
     selectKth(arr,4);
     
     HeapSort ob = new HeapSort();
     ob.sort(arr);
      
     System.out.println("Sorted array is");
     printArray(arr);
 }
 
 public static int quickselect(int[] G, int k) {
	  return quickselect(G, 0, G.length - 1, k - 1);
	}
	 
	private static int quickselect(int[] G, int first, int last, int k) {
	  if (first <= last) {
	    int pivot = partition(G, first, last);
	    if (pivot == k) {
	      return G[k];
	    }
	    if (pivot > k) {
	      return quickselect(G, first, pivot - 1, k);
	    }
	    return quickselect(G, pivot + 1, last, k);
	  }
	  return Integer.MIN_VALUE;
	}
	 
	private static int partition(int[] G, int first, int last) {
	  int pivot = first + new Random().nextInt(last - first + 1);
	  swap(G, last, pivot);
	  for (int i = first; i < last; i++) {
	    if (G[i] > G[last]) {
	      swap(G, i, first);
	      first++;
	    }
	  }
	  swap(G, first, last);
	  return first;
	}
	 
	private static void swap(int[] G, int x, int y) {
	  int tmp = G[x];
	  G[x] = G[y];
	  G[y] = tmp;
	}
}